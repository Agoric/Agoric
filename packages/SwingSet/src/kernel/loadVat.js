import { assert, details as X } from '@agoric/assert';
import { assertKnownOptions } from '../assertOptions';
import { makeVatSlot } from '../parseVatSlots';
import { insistCapData } from '../capdata';
import { makeVatTranslators } from './vatTranslator';

export function makeVatRootObjectSlot() {
  return makeVatSlot('object', true, 0n);
}

export function makeVatLoader(stuff) {
  const {
    vatManagerFactory,
    kernelSlog,
    makeVatConsole,
    addVatManager,
    queueToKref,
    kernelKeeper,
    panic,
    buildVatSyscallHandler,
    vatAdminRootKref,
  } = stuff;

  /**
   * Create a new vat at runtime (called when a 'create-vat' event reaches
   * the top of the run-queue).
   *
   * @param { string } vatID  The pre-allocated vatID
   * @param {*} source  The source object implementing the vat
   * @param {*} dynamicOptions  Options bag governing vat creation
   *
   * @returns {Promise<void>}  The vatID of the newly created vat
   */
  function createVatDynamically(vatID, source, dynamicOptions = {}) {
    assert(vatAdminRootKref, `initializeKernel did not set vatAdminRootKref`);
    // eslint-disable-next-line no-use-before-define
    return create(vatID, source, dynamicOptions, true);
  }

  /**
   * Recreate a dynamic vat from persistent state at kernel startup time.
   *
   * @param {string} vatID  The vatID of the vat to create
   * @param {*} source  The source object implementing the vat
   * @param {*} dynamicOptions  Options bag governing vat creation
   *
   * @returns {Promise<void>} fires when the vat is ready for messages
   */
  function recreateDynamicVat(vatID, source, dynamicOptions) {
    // eslint-disable-next-line no-use-before-define
    return create(vatID, source, dynamicOptions, true).catch(err =>
      panic(`unable to re-create vat ${vatID}`, err),
    );
    // if we fail to recreate the vat during replay, crash the kernel,
    // because we no longer have any way to inform the original caller
  }

  /**
   * Recreate a static vat from persistent state at kernel startup time.
   *
   * @param {string} vatID  The vatID of the vat to create
   * @param {*} source  The source object implementing the vat
   * @param {*} staticOptions  Options bag governing vat creation
   *
   * @returns {Promise<void>} A Promise which fires (with undefined) when the
   * vat is ready for messages.
   */
  function recreateStaticVat(vatID, source, staticOptions) {
    // eslint-disable-next-line no-use-before-define
    return create(vatID, source, staticOptions, false).catch(err =>
      panic(`unable to re-create vat ${vatID}`, err),
    );
  }

  const allowedDynamicOptions = [
    'description',
    'metered',
    'managerType', // TODO: not sure we want vats to be able to control this
    'vatParameters',
    'enableSetup',
    'enablePipelining',
    'virtualObjectCacheSize',
  ];

  const allowedStaticOptions = [
    'description',
    'name',
    'vatParameters',
    'managerType',
    'enableDisavow',
    'enableSetup',
    'enablePipelining',
    'virtualObjectCacheSize',
  ];

  /**
   * Instantiate a new vat.  The root object will be available soon, but we
   * immediately return the vatID so the ultimate requestor doesn't have to
   * wait.
   *
   * @param {string} vatID  The vatID for the new vat
   * @param {*} source  an object which either has a `bundle` (JSON-serializable
   *    data) or a `bundleName` string. The bundle defines the vat, and should
   *    be generated by calling bundle-source on a module with an export named
   *    `makeRootObject()` (or possibly `setup()` if the 'enableSetup' option is
   *    true). If `bundleName` is used, it must identify a bundle already known
   *    to the kernel (via the `config.bundles` table) which satisfies these
   *    constraints.
   * @param {*} options  an options bag. These options are currently understood:
   *
   *    'metered' if true, subjects the new dynamic vat to a meter that limits
   *        the amount of computation and allocation that can occur during any
   *        given crank. Stack frames are limited as well. The meter is refilled
   *        between cranks, but if the meter ever underflows, the vat is
   *        terminated. If false, the vat is unmetered.  Defaults to true for
   *        dynamic vats; static vats may not be metered.
   *
   *    'vatParameters' provides the contents of the second argument to
   *        'buildRootObject()'.  Defaults to `{}`.
   *
   *    'enableSetup' If true, permits the vat to construct itself using the
   *        `setup()` API, which bypasses the imposition of LiveSlots but
   *        requires the vat implementation to enforce the vat invariants
   *        manually.  If false, the vat will be constructed using the
   *        `buildRootObject()` API, which uses LiveSlots to enforce the vat
   *        invariants automatically.  Defaults to false.
   *
   *    'enablePipelining' If true, permits the kernel to pipeline messages to
   *        promises for which the vat is the decider directly to the vat
   *        without waiting for the promises to be resolved.  If false, such
   *        messages will be queued inside the kernel.  Defaults to false.
   *
   * @param {boolean} isDynamic  If true, the vat being created is a dynamic vat;
   *    if false, it's a static vat (these have differences in their allowed
   *    options and some of their option defaults).
   *
   * @returns {Promise<void>} A Promise which fires (with undefined) when the
   * vat is ready for messages.
   */
  async function create(vatID, source, options, isDynamic) {
    assert(source.bundle || source.bundleName, 'broken source');
    const vatSourceBundle =
      source.bundle || kernelKeeper.getBundle(source.bundleName);
    assert(vatSourceBundle, X`Bundle ${source.bundleName} not found`);
    assert.typeof(
      vatSourceBundle,
      'object',
      X`vat creation requires a bundle, not a plain string`,
    );

    assertKnownOptions(
      options,
      isDynamic ? allowedDynamicOptions : allowedStaticOptions,
    );
    const {
      metered = isDynamic,
      vatParameters = {},
      managerType,
      enableSetup = false,
      enableDisavow = false,
      enablePipelining = false,
      virtualObjectCacheSize,
      name,
    } = options;
    let terminated = false;

    // TODO: maybe hash the bundle object somehow for the description
    const sourceDesc = source.bundle
      ? 'from source bundle'
      : `from bundleName: ${source.bundleName}`;
    const description = `${options.description || ''} (${sourceDesc})`.trim();

    function notifyTermination(shouldReject, info) {
      insistCapData(info);
      if (terminated) {
        return;
      }
      terminated = true;

      // Embedding the info capdata into the arguments list, taking advantage of
      // the fact that neither vatID (which is a string) nor shouldReject (which
      // is a boolean) can contain any slots.
      const args = {
        body: JSON.stringify([vatID, shouldReject, JSON.parse(info.body)]),
        slots: info.slots,
      };

      queueToKref(vatAdminRootKref, 'vatTerminated', args, 'logFailure');
    }

    kernelSlog.addVat(
      vatID,
      isDynamic,
      description,
      name,
      vatSourceBundle,
      managerType,
      vatParameters,
    );
    const managerOptions = {
      managerType,
      bundle: vatSourceBundle,
      metered,
      enableDisavow,
      enableSetup,
      enablePipelining,
      notifyTermination,
      vatConsole: makeVatConsole('vat', vatID),
      liveSlotsConsole: makeVatConsole('ls', vatID),
      vatParameters,
      virtualObjectCacheSize,
      name,
    };

    const translators = makeVatTranslators(vatID, kernelKeeper);
    const vatSyscallHandler = buildVatSyscallHandler(vatID, translators);

    const finish = kernelSlog.startup(vatID);
    const manager = await vatManagerFactory(
      vatID,
      managerOptions,
      vatSyscallHandler,
    );
    finish();
    addVatManager(vatID, manager, translators, managerOptions);
  }

  async function loadTestVat(vatID, setup, creationOptions) {
    const managerOptions = {
      ...creationOptions,
      setup,
      enableSetup: true,
      managerType: 'local',
    };
    const translators = makeVatTranslators(vatID, kernelKeeper);
    const vatSyscallHandler = buildVatSyscallHandler(vatID, translators);
    const manager = await vatManagerFactory(
      vatID,
      managerOptions,
      vatSyscallHandler,
    );
    addVatManager(vatID, manager, translators, managerOptions);
  }

  return harden({
    createVatDynamically,
    recreateDynamicVat,
    recreateStaticVat,
    loadTestVat,
  });
}
